<?php

namespace App\Nova;

use App\Models\Accounts;
use Laravel\Nova\Fields\Password;
use Laravel\Nova\Fields\PasswordConfirmation;
use Laravel\Nova\Fields\BelongsTo;
use Laravel\Nova\Fields\Boolean;
use Laravel\Nova\Fields\ID;
use Illuminate\Http\Request;
use Laravel\Nova\Fields\Text;
use Laravel\Nova\Fields\BelongsToMany;
use Laravel\Nova\Http\Requests\NovaRequest;
use Outhebox\NovaHiddenField\HiddenField;

class Employee extends Resource
{
    /**
     * The model the resource corresponds to.
     *
     * @var string
     */
    public static $model = 'App\Models\Employees';

    /**
     * The single value that should be used to represent the resource when being displayed.
     *
     * @var string
     */
    public static $title = 'first_name';

    /**
     * The columns that should be searched.
     *
     * @var array
     */
    public static $search = [
        'id','first_name', 'last_name' ,'username' ,'email'
    ];

    /**
     * Get the fields displayed by the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function fields(Request $request)
    {
        return [
            ID::make()->sortable(),
            Text::make('First Name' ,'first_name')->sortable(),
            Text::make('Last Name'  ,'last_name')->sortable(),
            Text::make('Email' ,'email')->rules('required', 'email', 'max:255')->creationRules('unique:employees,email'),
            Text::make('Username' ,'username')->rules('required'),
            Password::make('Password' , 'password')->hideWhenUpdating()->rules('required'),
            PasswordConfirmation::make('Password Confirmation')->hideWhenUpdating()->rules('required'),
            BelongsTo::make('Dealer', 'account', 'App\Nova\Dealer')->rules('required')->sortable(),
           /* BelongsTo::make('Company','company','App\Nova\Company'),*/

            Boolean::make('Status'),
            HiddenField::make('created_by')->withMeta(['value'=> 1]),
            HiddenField::make('updated_by')->withMeta(['value'=> 1])
        ];
    }

    /**
     * Get the cards available for the request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function cards(Request $request)
    {
        return [];
    }

    /**
     * Get the filters available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function filters(Request $request)
    {
        return [];
    }

    /**
     * Get the lenses available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function lenses(Request $request)
    {
        return [];
    }

    /**
     * Get the actions available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function actions(Request $request)
    {
        return [];
    }

    public static function relatableDealer($query)
    {
        return $query->where('status', 1);
        //return parent::relatableQuery($request, $query); // TODO: Change the autogenerated stub
    }
}
